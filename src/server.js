import express from 'express'
import path from 'path'
import React from 'react'
import { renderToString } from 'react-dom/server'
import Counter from './components/Counter'

/**
 * Create an express app
 */
const app = express()

/**
 * Set the location of the static assets (ie the js bundle generated by webapck)
 */
app.use(express.static(path.resolve(__dirname, '../public')))

/**
 * Create a route that matches any path entered on the url bar
 */
app.get('/*', (req, res) => {
  /**
   * Convert JSX code to a HTML string that can be rendered server side with
   * `renderToString` a method provided by ReactDOMServer
   *
   * This sets up the app so that calling ReactDOM.hydrate() will preserve the
   * rendered HTML and only attach event handlers. In this app this is done in
   * `client.js`
   * (https://reactjs.org/docs/react-dom-server.html#rendertostring)
   */
  const jsx = <Counter />
  const reactDom = renderToString(jsx)

  /**
   * Set the app's response to 200 OK (https://httpstatuses.com/200)
   * Tells the browser this is a html text page and then returns the template
   * complete with the HTML string created from JSX React code created above
   */
  res.writeHead(200, { 'Content-Type': 'text/html' })
  res.end(htmlTemplate(reactDom))
})

/**
 * Tells the app to listen on port 3000 allowing access to the app on
 * localhost:3000
 */
app.listen(3000)

/**
 * An HTML String template to be rendered by the Node.js server. This function
 * takes a single argument: The HTML string created by passing JSX to
 * `renderToString`. And returns an HTML string that the Node.js server displays
 * on localhost:3000
 */
function htmlTemplate(reactDom) {
  return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>React SSR</title>
        </head>

        <body>
            <div id="app">${reactDom}</div>
            <script src="./assets/app.bundle.js"></script>
        </body>
        </html>
    `
}
